// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package mathmodule.actions;

import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import mathmodule.Misc;
import mathmodule.proxies.ComplexExpressionResult;
import mathmodule.proxies.ExpressionUseEnum;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import org.mariuszgromada.math.mxparser.Expression;
import java.math.BigDecimal;
import org.mariuszgromada.math.mxparser.Argument;

public class ComplexExpression extends CustomJavaAction<IMendixObject>
{
	private java.lang.String Expression;
	private java.util.List<IMendixObject> __Arguments;
	private java.util.List<mathmodule.proxies.Argument> Arguments;

	public ComplexExpression(IContext context, java.lang.String Expression, java.util.List<IMendixObject> Arguments)
	{
		super(context);
		this.Expression = Expression;
		this.__Arguments = Arguments;
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		this.Arguments = new java.util.ArrayList<mathmodule.proxies.Argument>();
		if (__Arguments != null)
			for (IMendixObject __ArgumentsElement : __Arguments)
				this.Arguments.add(mathmodule.proxies.Argument.initialize(getContext(), __ArgumentsElement));

		// BEGIN USER CODE
		IContext ctx = this.getContext();
		
		if (this.Expression == "" || this.Expression == null) {
			return Misc.getExpressionError(ctx, ComplexExpressionResult.getType(), "Expression cannot be empty");
		}
		
		Expression expression = new Expression(this.Expression);
		for(mathmodule.proxies.Argument argument : this.Arguments) {
			IMendixObject obj = argument.getMendixObject();
			
			String name = obj.getValue(ctx, mathmodule.proxies.Argument.MemberNames.ArgumentName.toString());
			BigDecimal value = obj.getValue(ctx, mathmodule.proxies.Argument.MemberNames.Value.toString());
			String stringValue = obj.getValue(ctx, mathmodule.proxies.Argument.MemberNames.StringValue.toString());
			String enumeration = obj.getValue(ctx, mathmodule.proxies.Argument.MemberNames.Use.toString());
			
			if (enumeration.equals(ExpressionUseEnum.Decimal.name()) && value != null) {
				Argument arg = new Argument(name, value.doubleValue());
				expression.addArguments(arg);
			} else if (enumeration.equals(ExpressionUseEnum.String.name()) && stringValue != null) {
				double doubleValue = Double.parseDouble(stringValue);
				if (!Double.isNaN(doubleValue)) {
					Argument arg = new Argument(name, doubleValue);
					expression.addArguments(arg);
				}
			}
		}

		boolean syntaxValid = expression.checkSyntax();
		if (syntaxValid) {
				
			double expressionResult = expression.calculate();
			boolean afterCalculateSatus = expression.checkSyntax();
			
			if (afterCalculateSatus) {
				if (Double.isNaN(expressionResult)) {
					return Misc.getExpressionError(ctx, ComplexExpressionResult.getType(), "Expression result is not a number");
				}
				return Misc.getComplexExpressionResult(ctx, expressionResult);
			} else {
				return Misc.getExpressionError(ctx, ComplexExpressionResult.getType(), expression.getErrorMessage());
			}

		} else {
			String[] missingArguments = expression.getMissingUserDefinedArguments();
			IMendixObject complexResult = Misc.getExpressionError(ctx, ComplexExpressionResult.getType(), expression.getErrorMessage());
			
			if (missingArguments.length > 0) {
				String hasMissing = ComplexExpressionResult.MemberNames.HasMissingArguments.toString();
				complexResult.setValue(ctx, hasMissing, true);
				
				for (int i = 0; i < missingArguments.length; i++) {
					String missing = missingArguments[i];
					IMendixObject missingObject = Core.instantiate(ctx, mathmodule.proxies.Argument.getType());
					missingObject.setValue(ctx, mathmodule.proxies.Argument.MemberNames.ArgumentName.toString(), missing);
					missingObject.setValue(ctx, mathmodule.proxies.Argument.MemberNames.Missing.toString(), complexResult.getId());
					Core.commit(ctx, missingObject);
				}
			}
			
			return complexResult;
		}
		
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "ComplexExpression";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
