// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package mathmodule.actions;

import org.mariuszgromada.math.mxparser.Expression;
import org.mariuszgromada.math.mxparser.RecursiveArgument;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import mathmodule.Misc;
import mathmodule.proxies.SimpleExpressionResult;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class RecursiveFunction extends CustomJavaAction<IMendixObject>
{
	private java.lang.String Function;
	private java.math.BigDecimal ValueIndex0;
	private java.math.BigDecimal ValueIndex1;
	private java.lang.String FunctionCall;

	public RecursiveFunction(IContext context, java.lang.String Function, java.math.BigDecimal ValueIndex0, java.math.BigDecimal ValueIndex1, java.lang.String FunctionCall)
	{
		super(context);
		this.Function = Function;
		this.ValueIndex0 = ValueIndex0;
		this.ValueIndex1 = ValueIndex1;
		this.FunctionCall = FunctionCall;
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		// BEGIN USER CODE
		IContext ctx = getContext();
		
		if (this.Function == null || this.Function == "") {
			return Misc.getExpressionError(ctx, SimpleExpressionResult.getType(), "Function cannot be empty");
		} else if (this.ValueIndex0 == null || this.ValueIndex1 == null) {
			return Misc.getExpressionError(ctx, SimpleExpressionResult.getType(), "For the recursive function you will need a value for n=0 and n=1");
		} else if (this.FunctionCall == null) {
			return Misc.getExpressionError(ctx, SimpleExpressionResult.getType(), "The function needs a function call");
		}
		
		RecursiveArgument recursive = new RecursiveArgument(this.Function);
		
		recursive.addBaseCase(0, this.ValueIndex0.doubleValue());
		recursive.addBaseCase(1, this.ValueIndex1.doubleValue());
		
		boolean isValid = recursive.checkSyntax();
		if (isValid) {
			
			Expression expression = new Expression(this.FunctionCall, recursive);
			boolean expressionValid = expression.checkSyntax();
			
			if (!expressionValid) {
				return Misc.getExpressionError(ctx, SimpleExpressionResult.getType(), expression.getErrorMessage());
			}
			
			double value = expression.calculate();
			
			if (Double.isNaN(value)) {
				return Misc.getExpressionError(ctx, SimpleExpressionResult.getType(), "Function does not return a number");
			}
			
			// Not sure if needed, maybe clear up memory
			recursive.resetAllCases();
			return Misc.getSimpleExpressionResult(ctx, value);
		} else {
			return Misc.getExpressionError(ctx, SimpleExpressionResult.getType(), recursive.getErrorMessage());
		}
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "RecursiveFunction";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
