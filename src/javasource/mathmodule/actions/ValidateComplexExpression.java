// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package mathmodule.actions;

import java.util.ArrayList;
import java.util.List;
import org.mariuszgromada.math.mxparser.Expression;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import mathmodule.Misc;
import mathmodule.proxies.ComplexValidation;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class ValidateComplexExpression extends CustomJavaAction<IMendixObject>
{
	private java.lang.String Expression;

	public ValidateComplexExpression(IContext context, java.lang.String Expression)
	{
		super(context);
		this.Expression = Expression;
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		// BEGIN USER CODE
		IContext ctx = this.getContext();
		
		if (this.Expression == "" || this.Expression == null) {
			return Misc.getExpressionError(ctx, ComplexValidation.getType(), "Expression cannot be empty");
		}
		
		Expression expression = new Expression(this.Expression);
		
		boolean status = expression.checkLexSyntax();
		if (status) {
			expression.checkSyntax();
			
			IMendixObject result = Core.instantiate(ctx, ComplexValidation.getType());
			List<IMendixObject> argumentsList = new ArrayList<IMendixObject>();

			result.setValue(ctx, ComplexValidation.MemberNames.IsValid.toString(), true);
			
			String[] usedArguments = expression.getMissingUserDefinedArguments();
			if (usedArguments.length > 0) {
				for (int i = 0; i < usedArguments.length; i++) {
					String arg = usedArguments[i];
					IMendixObject argObj = Core.instantiate(ctx, mathmodule.proxies.Argument.getType());
					
					argObj.setValue(ctx, mathmodule.proxies.Argument.MemberNames.ArgumentName.toString(), arg);
					argObj.setValue(ctx, mathmodule.proxies.Argument.MemberNames.Needed.toString(), result.getId());

					argumentsList.add(argObj);
				}
				Core.commit(ctx, argumentsList);
			}
			
			return result;
		} else {
			String error = expression.getErrorMessage();
			return Misc.getExpressionError(ctx, ComplexValidation.getType(), error);
		}
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "ValidateComplexExpression";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
